"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,_toPropertyKey(n.key),n)}}function _createClass(e,t,i){return t&&_defineProperties(e.prototype,t),i&&_defineProperties(e,i),Object.defineProperty(e,"prototype",{writable:!1}),e}function _toPropertyKey(e){var t=_toPrimitive(e,"string");return"symbol"==_typeof(t)?t:t+""}function _toPrimitive(e,t){if("object"!=_typeof(e)||!e)return e;var i=e[Symbol.toPrimitive];if(void 0===i)return("string"===t?String:Number)(e);var n=i.call(e,t||"default");if("object"!=_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}Object.defineProperty(exports,"__esModule",{value:!0}),exports.MenuToggler=void 0;var MenuToggler=exports.MenuToggler=function(){return _createClass(function e(t){var i,n,s,r,o,a;_classCallCheck(this,e),this.type=null!==(i=t.type)&&void 0!==i?i:"appear",this.transitionTime=null!==(n=t.transitionTime)&&void 0!==n?n:".25s",this.transitionType=null!==(s=t.transitionType)&&void 0!==s?s:".ease",this.menuDisplay=null!==(r=t.menuDisplay)&&void 0!==r?r:"block",this.slideBegin=null!==(o=t.slideBegin)&&void 0!==o?o:"translate(-100%, 0px)",this.slideEnd=null!==(a=t.slideEnd)&&void 0!==a?a:"translate(0px, 0px)",this.menuTriggerSelector=t.menuTriggerSelector,this.menuSelector=t.menuSelector,this.menuTrigger=document.querySelector(this.menuTriggerSelector),this.menu=document.querySelector(this.menuSelector),this.isChanging=!1,this.state="hide",this.init()},[{key:"init",value:function(){var t=this;this.menuTrigger.addEventListener("click",this.toggle.bind(this)),"appear"===this.type&&(this.menu.style.opacity=0,this.menu.style.display="none",this.menu.addEventListener("transitionend",function(e){e.target===t.menu&&(t.isChanging=!1,"hide"===t.state&&(t.menu.style.display="none"))})),"slide"===this.type&&(document.body.style.overflowX="hidden",this.setVendorStyleProperty(this.menu,"transform",this.slideBegin),setTimeout(function(){t.setVendorStyleProperty(t.menu,"transition","transform ".concat(t.transitionTime," ").concat(t.transitionType))},1))}},{key:"setVendorStyleProperty",value:function(e,t,i){for(var n=0,s=["webkit","moz","ms","o"];n<s.length;n++){var r=s[n];e.style["".concat(r).concat(t)]=i}e.style[t]=i}},{key:"toggle",value:function(){var e=this;if("appear"===this.type&&!this.isChanging){if("1"===this.menu.style.opacity)return this.setVendorStyleProperty(this.menu,"transition","opacity ".concat(this.transitionTime," ").concat(this.transitionType)),this.menuTrigger.classList.contains("burger")&&this.menuTrigger.classList.remove("burger_close"),this.state="hide",this.menu.style.opacity="0",void(this.isChanging=!0);if("0"===this.menu.style.opacity)return this.menuTrigger.classList.contains("burger")&&this.menuTrigger.classList.add("burger_close"),this.state="show",this.menu.style.display=this.menuDisplay,void setTimeout(function(){e.setVendorStyleProperty(e.menu,"transition","opacity ".concat(e.transitionTime," ").concat(e.transitionType)),e.menu.style.height="initial",e.menu.style.opacity="1",e.isChanging=!0},1)}"slide"!==this.type||this.isChanging||(this.menu.style.transform===this.slideBegin?(this.menuTrigger.classList.contains("burger")&&this.menuTrigger.classList.add("burger_close"),this.setVendorStyleProperty(this.menu,"transform",this.slideEnd),this.menu.style.transform=this.slideEnd):(this.menuTrigger.classList.contains("burger")&&this.menuTrigger.classList.remove("burger_close"),this.setVendorStyleProperty(this.menu,"transform",this.slideBegin),this.menu.style.transform=this.slideBegin))}}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
