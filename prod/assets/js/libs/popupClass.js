"use strict";exports.__esModule=!0,exports.Popup=void 0;var Popup=function(){function i(i){this.triggerSelectors=i.triggerSelectors,this.overlaySelector=i.overlaySelector,this.windowSelector=i.windowSelector,this.closeBtnSelectors=i.closeBtnSelectors,this.displayPopup=i.displayPopup||"flex",this.popupHeight=i.popupHeight||"100vh",this.popupWidth=i.popupWidth||"100%",this.disappearingTime=i.disappearingTime||600,this.disappearingType=i.disappearingType||"linear",this.slidingTime=i.slidingTime||500,this.slidingType=i.slidingType||"ease",this.slidingDir=i.slidingDir||"top",this.autocloseTime=i.autocloseTime,this.openOnKeys=i.openOnKeys,this.closeOnKeys=i.closeOnKeys,this.closeOnMiss=i.closeOnMiss||!0,this.appearType=i.appearType||"slide",this.popupOverlay=document.querySelector("".concat(this.overlaySelector)),this.popupWindow=document.querySelector("".concat(this.windowSelector)),console.log(this.appearType),this.init()}return i.prototype.init=function(){var o=this;if(this.hide(),this.triggerSelectors.forEach(function(i,t){document.querySelectorAll(i).forEach(function(i,t){console.log("trigger instance:"),console.log(i),i.addEventListener("click",o.show.bind(o)),i.addEventListener("touchstart",o.show.bind(o))})}),this.closeBtnSelectors.forEach(function(i,t){document.querySelectorAll(i).forEach(function(i,t){i.addEventListener("click",o.hide.bind(o)),i.addEventListener("touchstart",o.hide.bind(o))})}),this.closeOnMiss){var t=this.overlaySelector.slice(1);this.popupOverlay.addEventListener("click",function(i){i.target.classList.contains("".concat(t))&&o.hide()}),this.popupOverlay.addEventListener("touchstart",function(i){i.target.classList.contains("".concat(t))&&o.hide()})}function i(e,i,s){void 0===e&&(e=!1),e&&document.addEventListener(i,function(t){e.forEach(function(i){console.log(e),i==t.keyCode&&(console.log(o),s())})})}i(this.openOnKeys,"keydown",this.show.bind(this)),i(this.closeOnKeys,"keydown",this.hide.bind(this))},i.prototype.show=function(){var i=this;if(this.popupOverlay.style.zIndex=999999,"slide"==this.appearType)switch(this.popupWindow.style.transition="all ".concat(this.slidingTime/1e3,"s ").concat(this.slidingType,", height 0s ").concat(this.slidingType," 0s"),this.slidingTime&&this.slidingType&&this.slidingDir){case"left":this.popupWindow.style.left="0px";break;case"right":this.popupWindow.style.right="0px";break;case"top":this.popupWindow.style.top="0px";break;case"bottom":this.popupWindow.style.bottom="0px"}this.popupOverlay.style.height=this.popupHeight,this.popupOverlay.style.width=this.popupWidth,this.popupOverlay.style.opacity=1,this.popupOverlay.style.transition="opacity ".concat(this.disappearingTime/1e3,"s ").concat(this.disappearingType,", height 0s ").concat(this.disappearingType," 0s"),this.autocloseTime&&setTimeout(function(){i.hide()},this.autocloseTime)},i.prototype.hide=function(){if(this.popupOverlay.style.height=0,this.popupOverlay.style.opacity=0,console.log(this.popupOverlay),"slide"==this.appearType)switch(this.popupWindow.style.transition="all ".concat(this.slidingTime/1e3,"s ").concat(this.slidingType,", height 0s ").concat(this.slidingType," ").concat(this.slidingTime/1e3,"s"),this.slidingDir){case"left":this.popupWindow.style.left="-100%";break;case"right":this.popupWindow.style.right="-100%";break;case"top":this.popupWindow.style.top="-100%";break;case"bottom":this.popupWindow.style.bottom="-100%"}this.popupOverlay.style.transition="opacity ".concat(this.disappearingTime/1e3,"s ").concat(this.disappearingType,", height 0s ").concat(this.disappearingType," ").concat(this.disappearingTime/1e3,"s")},i}();exports.Popup=Popup;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
